---
import Sticker from './Sticker.astro';
import type { Props as StickerProps } from './Sticker.astro';

interface Props {
  sticker?: StickerProps['stickerType'];
  headlines: string[];
  stickerIsAnimated?: boolean;
}

const { sticker = 'memoji-home', headlines } = Astro.props;
---

<header>
  <Sticker stickerType={sticker} id="sticker" data-sticker-type={sticker} />
  <h1 id="headline" data-headlines={JSON.stringify(headlines)}><span id="cursor"></span></h1>
</header>

<script>
  import { typeWriter, deleteSelectedText } from '../../public/utils/typewriter';

  const stickerElement = document.getElementById('sticker') as HTMLElement;
  const stickerType = stickerElement!.getAttribute('data-sticker-type')!;
  const stickerSource = {
    'memoji-home': '../../images/stickers/Memoji_Home.png',
    'memoji-about': '../../images/stickers/Memoji_About.png',
    'memoji-macbook': '../../images/stickers/Memoji_MacBook.png',
  };

  const updateStickerSrc = (imageKey: keyof typeof stickerSource) => {
    const src = stickerSource[imageKey];
    const imgElement = stickerElement.querySelector('img') as HTMLImageElement;
    imgElement.src = src;
  };

  const setIsAnimated = (isAnimated: boolean) => {
    stickerElement.setAttribute('data-is-animated', isAnimated.toString());
  };
  const animateHeadlines = async (headlineElement: HTMLElement, cursor: Node, headlines: string[]) => {
    try {
      for (const [index, headline] of headlines.entries()) {
        updateStickerSrc('memoji-macbook');
        setIsAnimated(true); // Set isAnimated to true when starting the typing animation
        await typeWriter(headlineElement, cursor, headline);
        setIsAnimated(false);
        if (index < headlines.length - 1) {
          updateStickerSrc('memoji-home');
          await new Promise((resolve) => setTimeout(resolve, 5000));
          await deleteSelectedText(headlineElement, cursor);
        }
      }
      updateStickerSrc(stickerType as keyof typeof stickerSource);
    } catch (error) {
      console.error('Error animating headlines:', error);
    }
  };

  const headlineElement = document.getElementById('headline');
  const headlines = JSON.parse(headlineElement?.getAttribute('data-headlines') ?? '[]');
  const cursor = document.getElementById('cursor');

  if (headlineElement && cursor) {
    animateHeadlines(headlineElement, cursor, headlines);
  }
</script>

<!-- ... (CSS styles remain the same) ... -->

<style>
  #cursor {
    display: inline-block;
    margin-left: 0.1em;
    width: 0.08em;
    height: 100%;
    vertical-align: top;
    background-color: rgba(0, 0, 0, 0.714);
    animation: blink 1s infinite;
  }

  @keyframes blink {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  header {
    margin-top: 24px;
    gap: 106px;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  h1 {
    color: #222;
    font-family: 'Helvetica Now Display';
    font-size: 36px;
    font-style: normal;
    font-weight: 400;
    line-height: 110%;
    font-kerning: none;
  }

  @media screen and (min-width: 640px) {
    header {
      margin-top: 48px;
      gap: 130px;
    }

    h1 {
      font-size: 64px;
    }

    #cursor {
      height: 60px;
    }
  }

  @media screen and (min-width: 1024px) {
    header {
      margin-top: 64px;
      gap: 152px;
    }

    h1 {
      font-size: 96px;
    }

    #cursor {
      height: 90px;
    }
  }

  @media screen and (min-width: 1440px) {
    header {
      margin-top: 96px;
      gap: 164px;
    }

    h1 {
      font-size: 128px;
    }

    #cursor {
      height: 118px;
    }
  }
</style>
