---
import Sticker from './Sticker.astro';
import type { Props as StickerProps } from './Sticker.astro';

interface Props {
  sticker?: StickerProps['stickerType'];
  headlines: string[];
}

const { sticker = 'memoji-home', headlines } = Astro.props;
---

<header>
  <Sticker stickerType={sticker} />
  <h1 id="headline" data-headlines={JSON.stringify(headlines)}><span id="cursor"></span></h1>
</header>

<script>
  const typeWriter = async (parentElement: HTMLElement, cursor: Node, text: string | null) => {
    return new Promise(async (resolve) => {
      const chars = text!.split('');
      let charIndex = 0;
      const interval = setInterval(async () => {
        parentElement.textContent = text!.slice(0, charIndex);
        parentElement.appendChild(cursor);
        charIndex += 1;
        if (charIndex === chars.length) {
          clearInterval(interval);
          parentElement.appendChild(cursor);
          resolve(null);
        }
      }, 100);
    });
  };

  const deleteSelectedText = async (headlineElement: HTMLElement | null, cursor: Node) => {
    if (headlineElement) {
      const range = document.createRange();
      range.selectNodeContents(headlineElement);
      const selection = window.getSelection();
      selection!.removeAllRanges();
      selection!.addRange(range);
      await new Promise((resolve) => setTimeout(resolve, 1000)); // Adjust the delay (in milliseconds) as needed

      while (headlineElement.firstChild && headlineElement.firstChild !== cursor) {
        headlineElement.removeChild(headlineElement.firstChild);
      }

      selection!.removeAllRanges();
    }
  };

  const animateHeadlines = async (headlineElement: HTMLElement, cursor: Node, headlines: string[]) => {
    try {
      for (let i = 0; i < headlines.length; i++) {
        await typeWriter(headlineElement, cursor, headlines[i]);
        await new Promise((resolve) => setTimeout(resolve, 5000));
        if (i < headlines.length - 1) {
          await deleteSelectedText(headlineElement, cursor);
        }
      }
    } catch (error) {
      console.error('Error animating headlines:', error);
    }
  };

  const headlineElement = document.getElementById('headline');
  const headlines = JSON.parse(headlineElement?.getAttribute('data-headlines') ?? '[]');
  const cursor = document.getElementById('cursor');

  if (headlineElement && cursor) {
    animateHeadlines(headlineElement, cursor, headlines);
  }
</script>

<style>
  #cursor {
    display: inline-block;
    margin-left: 0.1em;
    width: 0.08em;
    height: 100%;
    vertical-align: top;
    background-color: rgba(0, 0, 0, 0.714);
    animation: blink 1s infinite;
  }

  @keyframes blink {
    0% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }
  header {
    margin-top: 24px;
    gap: 106px;
    display: flex;
    flex-direction: column;
  }

  h1 {
    color: #222;
    font-family: 'Helvetica Now Display';
    font-size: 36px;
    font-style: normal;
    font-weight: 400;
    line-height: 110%;
    font-kerning: none;
  }

  @media screen and (min-width: 640px) {
    header {
      margin-top: 48px;
      gap: 130px;
    }

    h1 {
      font-size: 64px;
    }

    #cursor {
      height: 60px;
    }
  }

  @media screen and (min-width: 1024px) {
    header {
      margin-top: 64px;
      gap: 152px;
    }

    h1 {
      font-size: 96px;
    }

    #cursor {
      height: 90px;
    }
  }

  @media screen and (min-width: 1440px) {
    header {
      margin-top: 96px;
      gap: 164px;
    }

    h1 {
      font-size: 128px;
    }

    #cursor {
      height: 118px;
    }
  }
</style>
